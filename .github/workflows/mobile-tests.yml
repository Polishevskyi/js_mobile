name: Mobile and API Tests

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - mobile
          - api

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  lint-and-format:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    if: ${{ !github.event.inputs.test_type || github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'all' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env

      - name: Run API tests
        run: npm run test:api
        env:
          CI: true

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-api
          path: allure-results/
          retention-days: 30

  mobile-tests:
    name: Mobile Tests on BrowserStack
    runs-on: ubuntu-latest
    needs: lint-and-format
    if: ${{ !github.event.inputs.test_type || github.event.inputs.test_type == 'mobile' || github.event.inputs.test_type == 'all' }}
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci


      - name: Create .env file
        run: |
          echo "TEST_ENV=${{ secrets.TEST_ENV }}" >> .env
          echo "BROWSERSTACK_USERNAME=${{ secrets.BROWSERSTACK_USERNAME }}" >> .env
          echo "BROWSERSTACK_ACCESS_KEY=${{ secrets.BROWSERSTACK_ACCESS_KEY }}" >> .env
          echo "MOBILE_APP_PATH=${{ secrets.MOBILE_APP_PATH }}" >> .env

      - name: Run Mobile tests
        run: npm run test:browserstack
        env:
          CI: true
          VALID_USERNAME: ${{ secrets.VALID_USERNAME }}
          VALID_PASSWORD: ${{ secrets.VALID_PASSWORD }}

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-mobile
          path: allure-results/
          retention-days: 30

  allure-report:
    name: Generate Allure Report
    runs-on: ubuntu-latest
    needs: [api-tests, mobile-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: allure-results-*
          path: allure-results
          merge-multiple: true

      - name: Check downloaded results
        if: always()
        run: |
          echo "Checking allure-results directory..."
          ls -la allure-results/ || echo "allure-results directory not found"
          echo "Contents of allure-results:"
          find allure-results -type f -name "*.json" -o -name "*.txt" | head -10 || echo "No result files found"

      - name: Generate Allure Report
        if: always()
        run: |
          echo "Creating Allure report..."
          mkdir -p allure-report
          
          # Try to generate report if results exist
          if [ -d "allure-results" ] && [ "$(find allure-results -name "*.json" -o -name "*.txt" 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "Found test results, generating report..."
            npx allure generate allure-results --clean -o allure-report || echo "Allure generation failed"
          fi
          
          # Create fallback report if needed
          if [ ! -f "allure-report/index.html" ]; then
            echo "Creating fallback report..."
            cat > allure-report/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Test Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .error { background: #ffebee; color: #c62828; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Test Automation Report</h1>
        <p>Generated: $(date)</p>
    </div>
    <div class="status error">
        <h2>⚠️ No Test Results Available</h2>
        <p>Tests may have failed or no results were generated. Check the GitHub Actions logs for details.</p>
    </div>
</body>
</html>
EOF
          fi
          
          echo "Report created successfully"

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report
          keep_files: false

      - name: Send Telegram notification
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_EVENT_REPOSITORY_NAME: ${{ github.event.repository.name }}
          TEST_ENV: ${{ secrets.TEST_ENV }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          chmod +x send-telegram-notification.sh
          ./send-telegram-notification.sh
